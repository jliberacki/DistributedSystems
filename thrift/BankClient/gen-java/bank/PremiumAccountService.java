/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bank;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-18")
public class PremiumAccountService {

  public interface Iface extends AccountService.Iface {

    public LoanCosts getLoanDetails(java.lang.String pesel, LoanParameters loanParameters) throws AuthorizationException, InvalidArgumentException, MissingArgumentException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends AccountService .AsyncIface {

    public void getLoanDetails(java.lang.String pesel, LoanParameters loanParameters, org.apache.thrift.async.AsyncMethodCallback<LoanCosts> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends AccountService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public LoanCosts getLoanDetails(java.lang.String pesel, LoanParameters loanParameters) throws AuthorizationException, InvalidArgumentException, MissingArgumentException, org.apache.thrift.TException
    {
      send_getLoanDetails(pesel, loanParameters);
      return recv_getLoanDetails();
    }

    public void send_getLoanDetails(java.lang.String pesel, LoanParameters loanParameters) throws org.apache.thrift.TException
    {
      getLoanDetails_args args = new getLoanDetails_args();
      args.setPesel(pesel);
      args.setLoanParameters(loanParameters);
      sendBase("getLoanDetails", args);
    }

    public LoanCosts recv_getLoanDetails() throws AuthorizationException, InvalidArgumentException, MissingArgumentException, org.apache.thrift.TException
    {
      getLoanDetails_result result = new getLoanDetails_result();
      receiveBase(result, "getLoanDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authorizationException != null) {
        throw result.authorizationException;
      }
      if (result.invalidArgumentException != null) {
        throw result.invalidArgumentException;
      }
      if (result.missingArgumentException != null) {
        throw result.missingArgumentException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoanDetails failed: unknown result");
    }

  }
  public static class AsyncClient extends AccountService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getLoanDetails(java.lang.String pesel, LoanParameters loanParameters, org.apache.thrift.async.AsyncMethodCallback<LoanCosts> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoanDetails_call method_call = new getLoanDetails_call(pesel, loanParameters, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoanDetails_call extends org.apache.thrift.async.TAsyncMethodCall<LoanCosts> {
      private java.lang.String pesel;
      private LoanParameters loanParameters;
      public getLoanDetails_call(java.lang.String pesel, LoanParameters loanParameters, org.apache.thrift.async.AsyncMethodCallback<LoanCosts> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pesel = pesel;
        this.loanParameters = loanParameters;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoanDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoanDetails_args args = new getLoanDetails_args();
        args.setPesel(pesel);
        args.setLoanParameters(loanParameters);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoanCosts getResult() throws AuthorizationException, InvalidArgumentException, MissingArgumentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoanDetails();
      }
    }

  }

  public static class Processor<I extends Iface> extends AccountService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getLoanDetails", new getLoanDetails());
      return processMap;
    }

    public static class getLoanDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoanDetails_args> {
      public getLoanDetails() {
        super("getLoanDetails");
      }

      public getLoanDetails_args getEmptyArgsInstance() {
        return new getLoanDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getLoanDetails_result getResult(I iface, getLoanDetails_args args) throws org.apache.thrift.TException {
        getLoanDetails_result result = new getLoanDetails_result();
        try {
          result.success = iface.getLoanDetails(args.pesel, args.loanParameters);
        } catch (AuthorizationException authorizationException) {
          result.authorizationException = authorizationException;
        } catch (InvalidArgumentException invalidArgumentException) {
          result.invalidArgumentException = invalidArgumentException;
        } catch (MissingArgumentException missingArgumentException) {
          result.missingArgumentException = missingArgumentException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends AccountService.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getLoanDetails", new getLoanDetails());
      return processMap;
    }

    public static class getLoanDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoanDetails_args, LoanCosts> {
      public getLoanDetails() {
        super("getLoanDetails");
      }

      public getLoanDetails_args getEmptyArgsInstance() {
        return new getLoanDetails_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<LoanCosts> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<LoanCosts>() { 
          public void onComplete(LoanCosts o) {
            getLoanDetails_result result = new getLoanDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getLoanDetails_result result = new getLoanDetails_result();
            if (e instanceof AuthorizationException) {
              result.authorizationException = (AuthorizationException) e;
              result.setAuthorizationExceptionIsSet(true);
              msg = result;
            } else if (e instanceof InvalidArgumentException) {
              result.invalidArgumentException = (InvalidArgumentException) e;
              result.setInvalidArgumentExceptionIsSet(true);
              msg = result;
            } else if (e instanceof MissingArgumentException) {
              result.missingArgumentException = (MissingArgumentException) e;
              result.setMissingArgumentExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoanDetails_args args, org.apache.thrift.async.AsyncMethodCallback<LoanCosts> resultHandler) throws org.apache.thrift.TException {
        iface.getLoanDetails(args.pesel, args.loanParameters,resultHandler);
      }
    }

  }

  public static class getLoanDetails_args implements org.apache.thrift.TBase<getLoanDetails_args, getLoanDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanDetails_args");

    private static final org.apache.thrift.protocol.TField PESEL_FIELD_DESC = new org.apache.thrift.protocol.TField("pesel", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOAN_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanParameters", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLoanDetails_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLoanDetails_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String pesel; // required
    public @org.apache.thrift.annotation.Nullable LoanParameters loanParameters; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PESEL((short)1, "pesel"),
      LOAN_PARAMETERS((short)2, "loanParameters");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PESEL
            return PESEL;
          case 2: // LOAN_PARAMETERS
            return LOAN_PARAMETERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PESEL, new org.apache.thrift.meta_data.FieldMetaData("pesel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "PESEL")));
      tmpMap.put(_Fields.LOAN_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("loanParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanParameters.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanDetails_args.class, metaDataMap);
    }

    public getLoanDetails_args() {
    }

    public getLoanDetails_args(
      java.lang.String pesel,
      LoanParameters loanParameters)
    {
      this();
      this.pesel = pesel;
      this.loanParameters = loanParameters;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanDetails_args(getLoanDetails_args other) {
      if (other.isSetPesel()) {
        this.pesel = other.pesel;
      }
      if (other.isSetLoanParameters()) {
        this.loanParameters = new LoanParameters(other.loanParameters);
      }
    }

    public getLoanDetails_args deepCopy() {
      return new getLoanDetails_args(this);
    }

    @Override
    public void clear() {
      this.pesel = null;
      this.loanParameters = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPesel() {
      return this.pesel;
    }

    public getLoanDetails_args setPesel(@org.apache.thrift.annotation.Nullable java.lang.String pesel) {
      this.pesel = pesel;
      return this;
    }

    public void unsetPesel() {
      this.pesel = null;
    }

    /** Returns true if field pesel is set (has been assigned a value) and false otherwise */
    public boolean isSetPesel() {
      return this.pesel != null;
    }

    public void setPeselIsSet(boolean value) {
      if (!value) {
        this.pesel = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public LoanParameters getLoanParameters() {
      return this.loanParameters;
    }

    public getLoanDetails_args setLoanParameters(@org.apache.thrift.annotation.Nullable LoanParameters loanParameters) {
      this.loanParameters = loanParameters;
      return this;
    }

    public void unsetLoanParameters() {
      this.loanParameters = null;
    }

    /** Returns true if field loanParameters is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanParameters() {
      return this.loanParameters != null;
    }

    public void setLoanParametersIsSet(boolean value) {
      if (!value) {
        this.loanParameters = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PESEL:
        if (value == null) {
          unsetPesel();
        } else {
          setPesel((java.lang.String)value);
        }
        break;

      case LOAN_PARAMETERS:
        if (value == null) {
          unsetLoanParameters();
        } else {
          setLoanParameters((LoanParameters)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PESEL:
        return getPesel();

      case LOAN_PARAMETERS:
        return getLoanParameters();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PESEL:
        return isSetPesel();
      case LOAN_PARAMETERS:
        return isSetLoanParameters();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanDetails_args)
        return this.equals((getLoanDetails_args)that);
      return false;
    }

    public boolean equals(getLoanDetails_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pesel = true && this.isSetPesel();
      boolean that_present_pesel = true && that.isSetPesel();
      if (this_present_pesel || that_present_pesel) {
        if (!(this_present_pesel && that_present_pesel))
          return false;
        if (!this.pesel.equals(that.pesel))
          return false;
      }

      boolean this_present_loanParameters = true && this.isSetLoanParameters();
      boolean that_present_loanParameters = true && that.isSetLoanParameters();
      if (this_present_loanParameters || that_present_loanParameters) {
        if (!(this_present_loanParameters && that_present_loanParameters))
          return false;
        if (!this.loanParameters.equals(that.loanParameters))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPesel()) ? 131071 : 524287);
      if (isSetPesel())
        hashCode = hashCode * 8191 + pesel.hashCode();

      hashCode = hashCode * 8191 + ((isSetLoanParameters()) ? 131071 : 524287);
      if (isSetLoanParameters())
        hashCode = hashCode * 8191 + loanParameters.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLoanDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPesel()).compareTo(other.isSetPesel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPesel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pesel, other.pesel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLoanParameters()).compareTo(other.isSetLoanParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanParameters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanParameters, other.loanParameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLoanDetails_args(");
      boolean first = true;

      sb.append("pesel:");
      if (this.pesel == null) {
        sb.append("null");
      } else {
        sb.append(this.pesel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loanParameters:");
      if (this.loanParameters == null) {
        sb.append("null");
      } else {
        sb.append(this.loanParameters);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loanParameters != null) {
        loanParameters.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanDetails_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoanDetails_argsStandardScheme getScheme() {
        return new getLoanDetails_argsStandardScheme();
      }
    }

    private static class getLoanDetails_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLoanDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PESEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pesel = iprot.readString();
                struct.setPeselIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOAN_PARAMETERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loanParameters = new LoanParameters();
                struct.loanParameters.read(iprot);
                struct.setLoanParametersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pesel != null) {
          oprot.writeFieldBegin(PESEL_FIELD_DESC);
          oprot.writeString(struct.pesel);
          oprot.writeFieldEnd();
        }
        if (struct.loanParameters != null) {
          oprot.writeFieldBegin(LOAN_PARAMETERS_FIELD_DESC);
          struct.loanParameters.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanDetails_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoanDetails_argsTupleScheme getScheme() {
        return new getLoanDetails_argsTupleScheme();
      }
    }

    private static class getLoanDetails_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLoanDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPesel()) {
          optionals.set(0);
        }
        if (struct.isSetLoanParameters()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPesel()) {
          oprot.writeString(struct.pesel);
        }
        if (struct.isSetLoanParameters()) {
          struct.loanParameters.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pesel = iprot.readString();
          struct.setPeselIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loanParameters = new LoanParameters();
          struct.loanParameters.read(iprot);
          struct.setLoanParametersIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLoanDetails_result implements org.apache.thrift.TBase<getLoanDetails_result, getLoanDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorizationException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INVALID_ARGUMENT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidArgumentException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField MISSING_ARGUMENT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("missingArgumentException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLoanDetails_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLoanDetails_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable LoanCosts success; // required
    public @org.apache.thrift.annotation.Nullable AuthorizationException authorizationException; // required
    public @org.apache.thrift.annotation.Nullable InvalidArgumentException invalidArgumentException; // required
    public @org.apache.thrift.annotation.Nullable MissingArgumentException missingArgumentException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTHORIZATION_EXCEPTION((short)1, "authorizationException"),
      INVALID_ARGUMENT_EXCEPTION((short)2, "invalidArgumentException"),
      MISSING_ARGUMENT_EXCEPTION((short)3, "missingArgumentException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 2: // INVALID_ARGUMENT_EXCEPTION
            return INVALID_ARGUMENT_EXCEPTION;
          case 3: // MISSING_ARGUMENT_EXCEPTION
            return MISSING_ARGUMENT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanCosts.class)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorizationException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthorizationException.class)));
      tmpMap.put(_Fields.INVALID_ARGUMENT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("invalidArgumentException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidArgumentException.class)));
      tmpMap.put(_Fields.MISSING_ARGUMENT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("missingArgumentException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MissingArgumentException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanDetails_result.class, metaDataMap);
    }

    public getLoanDetails_result() {
    }

    public getLoanDetails_result(
      LoanCosts success,
      AuthorizationException authorizationException,
      InvalidArgumentException invalidArgumentException,
      MissingArgumentException missingArgumentException)
    {
      this();
      this.success = success;
      this.authorizationException = authorizationException;
      this.invalidArgumentException = invalidArgumentException;
      this.missingArgumentException = missingArgumentException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanDetails_result(getLoanDetails_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoanCosts(other.success);
      }
      if (other.isSetAuthorizationException()) {
        this.authorizationException = new AuthorizationException(other.authorizationException);
      }
      if (other.isSetInvalidArgumentException()) {
        this.invalidArgumentException = new InvalidArgumentException(other.invalidArgumentException);
      }
      if (other.isSetMissingArgumentException()) {
        this.missingArgumentException = new MissingArgumentException(other.missingArgumentException);
      }
    }

    public getLoanDetails_result deepCopy() {
      return new getLoanDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authorizationException = null;
      this.invalidArgumentException = null;
      this.missingArgumentException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public LoanCosts getSuccess() {
      return this.success;
    }

    public getLoanDetails_result setSuccess(@org.apache.thrift.annotation.Nullable LoanCosts success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public AuthorizationException getAuthorizationException() {
      return this.authorizationException;
    }

    public getLoanDetails_result setAuthorizationException(@org.apache.thrift.annotation.Nullable AuthorizationException authorizationException) {
      this.authorizationException = authorizationException;
      return this;
    }

    public void unsetAuthorizationException() {
      this.authorizationException = null;
    }

    /** Returns true if field authorizationException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorizationException() {
      return this.authorizationException != null;
    }

    public void setAuthorizationExceptionIsSet(boolean value) {
      if (!value) {
        this.authorizationException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidArgumentException getInvalidArgumentException() {
      return this.invalidArgumentException;
    }

    public getLoanDetails_result setInvalidArgumentException(@org.apache.thrift.annotation.Nullable InvalidArgumentException invalidArgumentException) {
      this.invalidArgumentException = invalidArgumentException;
      return this;
    }

    public void unsetInvalidArgumentException() {
      this.invalidArgumentException = null;
    }

    /** Returns true if field invalidArgumentException is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalidArgumentException() {
      return this.invalidArgumentException != null;
    }

    public void setInvalidArgumentExceptionIsSet(boolean value) {
      if (!value) {
        this.invalidArgumentException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public MissingArgumentException getMissingArgumentException() {
      return this.missingArgumentException;
    }

    public getLoanDetails_result setMissingArgumentException(@org.apache.thrift.annotation.Nullable MissingArgumentException missingArgumentException) {
      this.missingArgumentException = missingArgumentException;
      return this;
    }

    public void unsetMissingArgumentException() {
      this.missingArgumentException = null;
    }

    /** Returns true if field missingArgumentException is set (has been assigned a value) and false otherwise */
    public boolean isSetMissingArgumentException() {
      return this.missingArgumentException != null;
    }

    public void setMissingArgumentExceptionIsSet(boolean value) {
      if (!value) {
        this.missingArgumentException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoanCosts)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorizationException();
        } else {
          setAuthorizationException((AuthorizationException)value);
        }
        break;

      case INVALID_ARGUMENT_EXCEPTION:
        if (value == null) {
          unsetInvalidArgumentException();
        } else {
          setInvalidArgumentException((InvalidArgumentException)value);
        }
        break;

      case MISSING_ARGUMENT_EXCEPTION:
        if (value == null) {
          unsetMissingArgumentException();
        } else {
          setMissingArgumentException((MissingArgumentException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorizationException();

      case INVALID_ARGUMENT_EXCEPTION:
        return getInvalidArgumentException();

      case MISSING_ARGUMENT_EXCEPTION:
        return getMissingArgumentException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorizationException();
      case INVALID_ARGUMENT_EXCEPTION:
        return isSetInvalidArgumentException();
      case MISSING_ARGUMENT_EXCEPTION:
        return isSetMissingArgumentException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanDetails_result)
        return this.equals((getLoanDetails_result)that);
      return false;
    }

    public boolean equals(getLoanDetails_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authorizationException = true && this.isSetAuthorizationException();
      boolean that_present_authorizationException = true && that.isSetAuthorizationException();
      if (this_present_authorizationException || that_present_authorizationException) {
        if (!(this_present_authorizationException && that_present_authorizationException))
          return false;
        if (!this.authorizationException.equals(that.authorizationException))
          return false;
      }

      boolean this_present_invalidArgumentException = true && this.isSetInvalidArgumentException();
      boolean that_present_invalidArgumentException = true && that.isSetInvalidArgumentException();
      if (this_present_invalidArgumentException || that_present_invalidArgumentException) {
        if (!(this_present_invalidArgumentException && that_present_invalidArgumentException))
          return false;
        if (!this.invalidArgumentException.equals(that.invalidArgumentException))
          return false;
      }

      boolean this_present_missingArgumentException = true && this.isSetMissingArgumentException();
      boolean that_present_missingArgumentException = true && that.isSetMissingArgumentException();
      if (this_present_missingArgumentException || that_present_missingArgumentException) {
        if (!(this_present_missingArgumentException && that_present_missingArgumentException))
          return false;
        if (!this.missingArgumentException.equals(that.missingArgumentException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetAuthorizationException()) ? 131071 : 524287);
      if (isSetAuthorizationException())
        hashCode = hashCode * 8191 + authorizationException.hashCode();

      hashCode = hashCode * 8191 + ((isSetInvalidArgumentException()) ? 131071 : 524287);
      if (isSetInvalidArgumentException())
        hashCode = hashCode * 8191 + invalidArgumentException.hashCode();

      hashCode = hashCode * 8191 + ((isSetMissingArgumentException()) ? 131071 : 524287);
      if (isSetMissingArgumentException())
        hashCode = hashCode * 8191 + missingArgumentException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLoanDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAuthorizationException()).compareTo(other.isSetAuthorizationException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorizationException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizationException, other.authorizationException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInvalidArgumentException()).compareTo(other.isSetInvalidArgumentException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalidArgumentException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidArgumentException, other.invalidArgumentException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMissingArgumentException()).compareTo(other.isSetMissingArgumentException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissingArgumentException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missingArgumentException, other.missingArgumentException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLoanDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorizationException:");
      if (this.authorizationException == null) {
        sb.append("null");
      } else {
        sb.append(this.authorizationException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalidArgumentException:");
      if (this.invalidArgumentException == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidArgumentException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("missingArgumentException:");
      if (this.missingArgumentException == null) {
        sb.append("null");
      } else {
        sb.append(this.missingArgumentException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanDetails_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoanDetails_resultStandardScheme getScheme() {
        return new getLoanDetails_resultStandardScheme();
      }
    }

    private static class getLoanDetails_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLoanDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoanCosts();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorizationException = new AuthorizationException();
                struct.authorizationException.read(iprot);
                struct.setAuthorizationExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVALID_ARGUMENT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalidArgumentException = new InvalidArgumentException();
                struct.invalidArgumentException.read(iprot);
                struct.setInvalidArgumentExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MISSING_ARGUMENT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.missingArgumentException = new MissingArgumentException();
                struct.missingArgumentException.read(iprot);
                struct.setMissingArgumentExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorizationException != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorizationException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invalidArgumentException != null) {
          oprot.writeFieldBegin(INVALID_ARGUMENT_EXCEPTION_FIELD_DESC);
          struct.invalidArgumentException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.missingArgumentException != null) {
          oprot.writeFieldBegin(MISSING_ARGUMENT_EXCEPTION_FIELD_DESC);
          struct.missingArgumentException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanDetails_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoanDetails_resultTupleScheme getScheme() {
        return new getLoanDetails_resultTupleScheme();
      }
    }

    private static class getLoanDetails_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLoanDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthorizationException()) {
          optionals.set(1);
        }
        if (struct.isSetInvalidArgumentException()) {
          optionals.set(2);
        }
        if (struct.isSetMissingArgumentException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAuthorizationException()) {
          struct.authorizationException.write(oprot);
        }
        if (struct.isSetInvalidArgumentException()) {
          struct.invalidArgumentException.write(oprot);
        }
        if (struct.isSetMissingArgumentException()) {
          struct.missingArgumentException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new LoanCosts();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authorizationException = new AuthorizationException();
          struct.authorizationException.read(iprot);
          struct.setAuthorizationExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.invalidArgumentException = new InvalidArgumentException();
          struct.invalidArgumentException.read(iprot);
          struct.setInvalidArgumentExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.missingArgumentException = new MissingArgumentException();
          struct.missingArgumentException.read(iprot);
          struct.setMissingArgumentExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
